import type { NextPage } from "next";
import Head from "next/head";
import { PrometheusDriver } from "prometheus-query";
import { subHours } from "date-fns";
import useSWR from "swr";
import { Container, styled, Typography } from "@mui/material";
import LinearProgress, {
  linearProgressClasses,
} from "@mui/material/LinearProgress";

const prom = new PrometheusDriver({
  endpoint: "https://victoria.universalis.app",
});

interface DataPoint {
  time: Date;
  value: number;
}

const queryTimeSeries = async (
  q: string,
  start: Date,
  end: Date,
  step: string
): Promise<DataPoint[]> => {
  const queryResult = await prom.rangeQuery(q, start, end, step);
  if (queryResult.result.length !== 1) {
    throw new Error(
      `Expected single time series, got ${queryResult.result.length}`
    );
  }

  const series: Iterable<DataPoint> = queryResult.result[0].values;
  return [...series];
};

const mean = (data: DataPoint[]): number => {
  let total = 0.0;
  let count = 0;
  for (const point of data) {
    total += point.value;
    count++;
  }

  return total / count;
};

const useMeanMetric = (query: string, start: Date, end: Date, step: string) =>
  useSWR(query, (q) => queryTimeSeries(q, start, end, step).then(mean));

const BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({
  height: 30,
  borderRadius: 5,
  [`&.${linearProgressClasses.colorPrimary}`]: {
    backgroundColor:
      theme.palette.grey[theme.palette.mode === "light" ? 200 : 800],
  },
  [`& .${linearProgressClasses.bar}`]: {
    borderRadius: 5,
    backgroundColor: theme.palette.mode === "light" ? "#1a90ff" : "#308fe8",
  },
}));

const Home: NextPage = () => {
  const end = new Date();
  const start = subHours(end, 6);
  const step = "5s";

  const { data: avgWebsiteErrorRate, error: avgWebsiteErrorRateErr } =
    useMeanMetric(
      '1.0 - ((sum (rate(traefik_service_requests_total{service="mogboard@docker", code="200"}[1m]))) / (sum (rate(traefik_service_requests_total{service="mogboard@docker"}[1m]))))',
      start,
      end,
      step
    );
  if (avgWebsiteErrorRateErr != null) {
    console.error(avgWebsiteErrorRateErr);
  }

  const { data: avgWebsiteResponseTime, error: avgWebsiteResponseTimeErr } =
    useMeanMetric(
      'histogram_quantile(0.95, sum by(le) (rate(traefik_service_request_duration_seconds_bucket{service="mogboard@docker"}[1m])))',
      start,
      end,
      step
    );
  if (avgWebsiteResponseTimeErr != null) {
    console.error(avgWebsiteResponseTimeErr);
  }

  const { data: avgApiErrorRate, error: avgApiErrorRateErr } = useMeanMetric(
    '1.0 - ((sum (rate(traefik_service_requests_total{service="universalis@docker", code="200"}[1m]))) / (sum (rate(traefik_service_requests_total{service="universalis@docker"}[1m]))))',
    start,
    end,
    step
  );
  if (avgApiErrorRateErr != null) {
    console.error(avgApiErrorRateErr);
  }

  const { data: avgApiResponseTime, error: avgApiResponseTimeErr } =
    useMeanMetric(
      'histogram_quantile(0.95, sum by(le) (rate(traefik_service_request_duration_seconds_bucket{service="universalis@docker"}[1m])))',
      start,
      end,
      step
    );
  if (avgApiResponseTimeErr != null) {
    console.error(avgApiResponseTimeErr);
  }

  return (
    <>
      <Head>
        <title>Universalis - Service Status</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxWidth="sm">
        <main>
          <Typography variant="h2" component="h1">
            Service Status
          </Typography>

          <Typography variant="body1">
            Website error rate:{" "}
            {avgWebsiteErrorRate == null
              ? ""
              : `${(avgWebsiteErrorRate * 100).toFixed(2)}%`}
          </Typography>
          <BorderLinearProgress
            color="primary"
            variant="determinate"
            value={avgWebsiteErrorRate ?? 0}
          />
          <div style={{ marginBottom: 10 }} />
          <Typography variant="body1">
            Website response time (P95):{" "}
            {avgWebsiteResponseTime == null
              ? ""
              : `${avgWebsiteResponseTime.toFixed(2)}s`}
          </Typography>
          <BorderLinearProgress
            color="primary"
            variant="determinate"
            value={avgWebsiteResponseTime ?? 0}
          />
          <div style={{ marginBottom: 10 }} />
          <Typography variant="body1">
            API error rate:{" "}
            {avgApiErrorRate == null
              ? ""
              : `${(avgApiErrorRate * 100).toFixed(2)}%`}
          </Typography>
          <BorderLinearProgress
            color="primary"
            variant="determinate"
            value={avgApiErrorRate ?? 0}
          />
          <div style={{ marginBottom: 10 }} />
          <Typography variant="body1">
            API response time (P95):{" "}
            {avgApiResponseTime == null
              ? ""
              : `${avgApiResponseTime.toFixed(2)}s`}
          </Typography>
          <BorderLinearProgress
            color="primary"
            variant="determinate"
            value={avgApiResponseTime ?? 0}
          />
        </main>
      </Container>
    </>
  );
};

export default Home;
